#!/usr/bin/env bash

#
# SSH Connection Utility (SCU)
# - ssh connection utility with pre-defined hosts list
# https://github.com/dualmi/scu
#
# This project is licensed under GPL 3 License - see [https://www.gnu.org/licenses/gpl-3.0.en.html]
#

declare -A sshhostlist;
hosts_file="$HOME/.scurc";
_bash=$(which bash)

echo -e "\n\tSSH Connection Utility with predefined hosts list\n";

# Hosts file check part.
# If file doesn't exists it can be generated when 'init' param is set.
if [[ -f $hosts_file ]]; then
  # shellcheck source=.scurc
  source "$hosts_file"
else
  if [[ $1 = "init" ]]; then
    # At next step example config file will be generated
cat > "$hosts_file" <<EOL
# Array entry format:
# [host-useful-name]="username* server.address.or.ip* ssh-port-if-not-default other-ssh-arguments"
# * - is required

# If you'll set the path to ansible host file(s), ansible hosts will be loaded firstly.
# Hosts with the same names will be overwritten (from the last loaded inventory file)

# yq - https://github.com/mikefarah/yq - must be installed if you using an ansible inventory

# You could point several space separated inventory files
ansiblepath="
$HOME/.scurc.yaml
/wrong/file/name
"

sshhostlist=(
  # here is 4 examples to show how it will be shown in terminal
  # while you just run 'scu' w/o parameters or
  # type only part of host name like 'scu host'
  [example-host-one]="sshuser host-one.domain.local"
  [example-host-two]="root host-two.domain.local 2222"
  [example-line-one]="games server.domain.local 22"
  [example-ext-host]="admin h24.contoso.com 22022 -i ~/.ssh/id_rsa_for_contoso"
);
EOL

cat > "$hosts_file.yaml" <<EOL
# Here is the inventory example which could be used by Ansible and scu
all:
  children:
    my_company:
      vars:
        ansible_user: root
        ansible_port: 22
      children:
        firstgroup:
          hosts:
            example-host-yaml:
              ansible_host: 192.168.1.1
            example-host-yaml-args:
              ansible_user: admin
              ansible_host: 192.168.2.2
              ansible_port: 3333
              ansible_ssh_common_args: '-o ProxyCommand="ssh -W %h:%p -q ssh-tunnel@10.10.2.2 -p 2222"'
EOL

    echo "Example config files $hosts_file and $hosts_file.yaml are generated.";
    echo -e "Edit them as you wish.\n";
    exit 0;
  fi
  echo "File with list of ssh hosts ($hosts_file) not found. No way to live.";
  echo "(!) You can initialize example file - run '$0 init' to do that.";
  echo "";
  exit 1;
fi

# # If path to ansible host file (yaml format) is set, then using it and updating original list from .scurc
if [[ $ansiblepath ]]; then
  if [[ $(yq --version | awk '{ print $NF }' | sed -e 's,^[^0-9]\([0-9]*\).*,\1,g') -lt 4 ]]; then
    echo -e "Your yq version not suitable for this script\n please install the latest version from https://github.com/mikefarah/yq"
  fi
  for inventory in $ansiblepath; do
    if [[ -r $inventory ]]; then
      OLDIFS=$IFS
      IFS=$'\n'
      for line in $(
        yq -r '.all.children.* as $company
          | $company.children.*.*
          | to_entries
          | select(.[].value | type=="!!map").[]
          | [{.key: (.value.ansible_user // $company.vars.ansible_user // "root")
           + " " + .value.ansible_host + " " + (.value.ansible_port // $company.vars.ansible_port // 22)
           + " " + (.value.ansible_ssh_common_args // $company.vars.ansible_ssh_common_args // "")}]
          | .[]' $inventory | sed -e 's,"$,,;s,",,;s,\\",",g;s,\x27,,g' | grep -E -v '^#'
        ); do
          sshhostlist["${line%%:*}"]=${line#*:}
      done
      IFS=$OLDIFS
    else
      echo -e "\n! Path $inventory is set in ansiblepath variable, but file is not readable!\n! Either clear this or specify the correct path\n"
    fi
  done
fi

# Indexing hosts list. After that connection by host number will be available.
declare -A array_index;
array_i=1;
for value in "${!sshhostlist[@]}"; do
  array_index[$value]=$array_i;
  array_i=$(( array_i+1 ))
done

# Connecting to host if exists
host_connect=$1
for sshhost in "${!sshhostlist[@]}"; do
  if [[ $sshhost = "$host_connect" ]] || [[ ${array_index[$sshhost]} = "$host_connect" ]]; then
    USERNAME=$(echo -n "${sshhostlist[$sshhost]}"|awk '{ print $1 }');
    ADDRESS=$(echo -n "${sshhostlist[$sshhost]}"|awk '{ print $2 }');
    PORT=$(echo -n "${sshhostlist[$sshhost]}"|awk -v ORS="" '{ print $3; if ($3=="") printf "%s","22" }');
    SSHARGS=$(echo -n "${sshhostlist[$sshhost]}"|awk '{ if ($4) print substr($0, index($0,$4)) }');
    echo -n "Connecting to $sshhost with command: ";
    $_bash -x -c "ssh -p $PORT $SSHARGS $USERNAME@$ADDRESS"
    exit 0;
  fi
done

#
# Usage information and hosts list
# which will be displayed if no valid host was choosen
#
echo -e "\t\tUsage: $0 <host number|host name>\n";
echo "Available hosts:";
counter=1;
counter2=1;
for value in "${!sshhostlist[@]}"; do
  name="$value";
  value="${array_index[$value]}: $value";
  if [[ ${#value} -gt 7 ]]; then
    if [[ ${#value} -gt 15 ]]; then
      RES="$value\t";
    else
      RES="$value\t\t";
    fi
  else
    RES="$value\t\t\t";
  fi
  if [[ -n $host_connect ]]; then
    [[ $RES =~ $host_connect ]] || continue;
    MATCHVALUE="$name";
    echo -ne "$RES";
  else
    echo -ne "$RES";
  fi
  counter=$(( counter+1 ))
  counter2=$(( counter2+1 ))
  if [[ $counter -gt 3 ]]; then
    echo "";
    counter=1;
  fi
done
echo "";
if [ $counter2 -eq 2 ] && [ -n "$MATCHVALUE" ]; then
  echo "Connecting to only one matched host $MATCHVALUE...";
  $0 "$MATCHVALUE";
  exit 0;
fi
if [ -n "$host_connect" ] && [ $counter2 -eq 1 ]; then
  echo "There is no host to connect with name you wrote...";
fi
echo "";
if [ -n "$host_connect" ] && [ $counter2 -gt 1 ]; then
  echo -n "Enter host number / host name to connect: "
  read -r input
  $0 "$input"
  exit 0;
fi
